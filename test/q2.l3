(define last-element
   (lambda (lst)
      (if (eq?(cdr lst) '())
          (car lst)
          (last-element (cdr lst)))
  )
)

(define power
    (lambda (n1 n2)
       (if (= n2 0)
           1
           (* n1 (power n1 (- n2 1))))
    )
)

(define sum-lst-power
    (lambda (lst n)
       (if (eq? lst '())
           0
           (+ (power (car lst) n) (sum-lst-power (cdr lst) n))
       )    
    )
)
      
  
(define num-from-digits
  (lambda (lst)
    (if (eq? lst '()) 0
        (if (eq? (cdr lst) '()) (car lst) 
            (if (eq? (cdr(cdr lst)) '())
        (+ (* 10 (car lst)) (car(cdr lst)))
        (num-from-digits (cons (+ (* 10 (car lst)) (car(cdr lst))) (cdr(cdr lst))))
    ))))
)

(define size
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ 1 (size (cdr lst))))))
(define is-narcissistic
  (lambda (lst)
       (eq? (num-from-digits lst) (sum-lst-power lst (size lst)))
    )
)
 